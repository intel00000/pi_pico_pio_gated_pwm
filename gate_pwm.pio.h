// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// gate_pwm //
// -------- //

#define gate_pwm_wrap_target 0
#define gate_pwm_wrap 10

static const uint16_t gate_pwm_program_instructions[] = {
    //     .wrap_target
    0x80a0, //  0: pull   block
    0xa027, //  1: mov    x, osr
    0xe040, //  2: set    y, 0
    0x38a0, //  3: wait   1 pin, 0        side 1
    0x3020, //  4: wait   0 pin, 0        side 0
    0x0046, //  5: jmp    x--, 6
    0x00c8, //  6: jmp    pin, 8
    0x00a3, //  7: jmp    x != y, 3
    0xc010, //  8: irq    nowait 0 rel
    0xc030, //  9: irq    wait 0 rel
    0x0000, // 10: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program gate_pwm_program = {
    .instructions = gate_pwm_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config gate_pwm_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + gate_pwm_wrap_target, offset + gate_pwm_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

// setup code for the pio C SDK
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "pico/stdlib.h"
// We'll provide a helper to init the gate_pwm program
static inline void gate_pwm_program_init(
    PIO pio,
    uint sm,
    uint offset,
    uint in_pin,   // The input pin (PWM signal)
    uint side_pin, // The side-set pin (gated output)
    uint jmp_pin   // pin for jmp pin finish
)
{
    // get default config from the auto-generated functions
    pio_sm_config c = gate_pwm_program_get_default_config(offset);
    // map output pin to the side-set pin => this is the gated output
    pio_gpio_init(pio, side_pin);                               // first init the side-set pin to pio
    pio_sm_set_consecutive_pindirs(pio, sm, side_pin, 1, true); // set it as output
    sm_config_set_sideset_pin_base(&c, side_pin);
    // map the input pin to the input pin => this is the PWM signal
    // no need to use pio_gpio_init since we are only reading it
    sm_config_set_in_pin_base(&c, in_pin);
    // map the jump pin to the jump pin => this is used to signal midway interrupt
    // again we are only reading it, so no need to use pio_gpio_init
    sm_config_set_jmp_pin(&c, jmp_pin);
    // 6) Initialize the SM with that config
    pio_sm_init(pio, sm, offset, &c);
}

#endif
